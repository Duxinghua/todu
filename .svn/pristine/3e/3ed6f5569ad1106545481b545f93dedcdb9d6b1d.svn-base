<template>
  <div class="self-container">
    <div class="self-box">
      <!--查询项-->
      <el-row>
        <el-col>
          <span style="font-size: 12px">用户名</span>
          <el-input v-model="queryUserName" placeholder="请输入用户名关键字" style="width: 200px" size="mini" />
          <span style="font-size: 12px;margin: 20px 0 0 10px">工号</span>
          <el-input v-model="queryWorkNumber" placeholder="请输入工号关键字" style="width: 200px" size="mini" />
          <span style="font-size: 12px;margin: 20px 0 0 10px">手机号</span>
          <el-input v-model="queryContactInfo" placeholder="请输入手机号关键字" style="width: 200px" size="mini" />
          <el-button size="mini" type="primary">查询</el-button>
          <el-button size="mini" type="primary" icon="el-icon-plus" style="float:right" @click="handleAddAccount()">新建账号
          </el-button>
        </el-col>
      </el-row>
      <!--操作-->
      <el-row>
        <el-col>
          <div style="margin-top: 10px;">
            <el-button style="cursor:pointer;" size="mini" type="info" effect="dark" @click="doExportData()">导出</el-button>
          </div>
        </el-col>
      </el-row>
      <!--数据表格-->
      <div style="padding-bottom: 20px 0 ;flex: 1;display: flex">
        <el-table
          :data="tableData"
          style="width: 100%;margin-top: 20px"
          :header-cell-style="{background:'#eef1f6',color:'#606266'}"
          @selection-change="handleSelectionChange"
        >
          <el-table-column
            type="selection"
            width="55"
          />
          <el-table-column
            prop="userName"
            label="用户名"
            width="180"
            align="center"
          />
          <el-table-column
            prop="workNumber"
            label="工号"
            width="180"
            align="center"
          />
          <el-table-column
            prop="contactInfo"
            label="手机号"
            align="center"
            width="180"
          />
          <el-table-column
            label="创建时间"
            align="center"
          >
            <template slot-scope="scope">
              {{ scope.row.createTime | fmtdate }}
            </template>
          </el-table-column>
          <el-table-column label="状态" width="180" align="center">
            <template slot-scope="scope">
              <el-switch
                v-model="scope.row.userStatus"
                active-color="#13ce66"
                inactive-color="#ff4949"
                @change="changeUserStatus(scope.row)"
              />
            </template>
          </el-table-column>
          <el-table-column label="操作" width="150" fixed="right" align="center">
            <template slot-scope="scope">
              <el-link type="primary" :underline="false" style="font-size: 14px" @click="handleResetPwd(scope.row)">重置密码</el-link>
            </template>
          </el-table-column>
        </el-table>
      </div>
      <!--分页-->
      <el-pagination
        :current-page="pageNum"
        :page-sizes="[20, 50, 80, 200]"
        :page-size="pageSize"
        layout="total, sizes, prev, pager, next, jumper"
        :total="total"
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
      />
      <!--新建账号-->
      <el-drawer
        ref="addAccountDrawer"
        :visible.sync="dialog"
        direction="rtl"
        :show-close="false"
        custom-class="demo-drawer"
        size="30%"
      >
        <span style="margin-left: 50px;margin-top: 30px">新建账号</span>
        <div>
          <el-form :model="userForm" style="margin: 50px 0 0 50px">
            <el-form-item prop="workNumber" style="width: 300px">
              <el-input v-model="userForm.workNumber" placeholder="工号" />
            </el-form-item>
            <el-form-item prop="userName" style="width: 300px">
              <el-input v-model="userForm.userName" placeholder="姓名" />
            </el-form-item>
            <el-form-item prop="contactInfo" style="width: 300px">
              <el-input v-model="userForm.contactInfo" placeholder="手机号" />
            </el-form-item>
            <el-form-item>
              <el-cascader
                v-model="userForm.deptId"
                :options="deptTreeList"
                :show-all-levels="showAllLevels"
                :disabled="cascaderDisabled"
                :props="{ checkStrictly: true,emitPath:false,expandTrigger:'hover',value:'id',label:'label'}"
                placeholder="请选择所属部门"
                clearable
                style="width:300px"
              />
            </el-form-item>
            <el-form-item prop="contactInfo" style="width: 300px">
              <el-input v-model="userForm.password" placeholder="请输入用户密码/默认密码为123456" />
            </el-form-item>
          </el-form>
          <div style="margin: 100px 0 0 50px;">
            <el-button @click="cancelForm">取 消</el-button>
            <el-button type="primary" :loading="loading" @click="doCommitAccount()">{{ loading ? '提交中 ...' : '确定'
            }}
            </el-button>
          </div>
        </div>
      </el-drawer>
      <!--重置密码-->
      <el-drawer
        ref="resetDrawer"
        :visible.sync="resetDialog"
        direction="rtl"
        :with-header="false"
        size="30%"
      >
        <span style="margin-left: 50px;margin-top: 30px">重置密码</span>
        <div class="demo-drawer__content">
          <el-form :model="passwordForm" style="margin: 50px 0 0 50px">
            <el-form-item prop="userName" style="width: 300px">
              <el-input v-model="passwordForm.userName" placeholder="姓名" disabled />
            </el-form-item>
            <el-form-item prop="deptName" style="width: 300px">
              <el-input v-model="passwordForm.deptName" placeholder="未分配部门" disabled />
            </el-form-item>
            <el-form-item prop="password" style="width: 300px">
              <el-input v-model="passwordForm.password" placeholder="请输入密码" />
            </el-form-item>
          </el-form>
          <div style="margin: 100px 0 0 50px;">
            <el-button @click="cancelResetForm">取 消</el-button>
            <el-button type="primary" :loading="loading" @click="doResetPwd()">{{ loading ? '提交中 ...' :
              '确定' }}
            </el-button>
          </div>
        </div>
      </el-drawer>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      queryUserName: '',
      queryWorkNumber: '',
      queryContactInfo: '',
      pageNum: 1,
      pageSize: 20,
      total: 0,
      tableData: [
        {
          workNumber: '13589768987',
          userName: '王小虎',
          contactInfo: '13589768987',
          createTime: '2019-08-19',
          userStatus: true
        }
      ],
      deptTreeList: [],
      multipleSelection: [],
      table: false,
      dialog: false,
      resetDialog: false,
      loading: false,
      cascaderDisabled: false,
      showAllLevels: false,
      userForm: {
        workNumber: '',
        userName: '',
        password: '',
        contactInfo: '',
        deptId: '-1'
      },
      passwordForm: {
        userName: '王大锤',
        deptName: '',
        password: '123456'

      },
      formLabelWidth: '80px',
      timer: null
    }
  },
  created() {
    const breadData = {
      level1: '账号管理'
    }
    this.$emit('setBread', breadData)
  },
  mounted() {
    this.getList()
    this.getDeptTreeList()
  },
  methods: {
    // 加载用户列表
    async getList() {
      const res = await this.$http.get(`admin/list/account?queryUserName=${this.queryUserName}&queryWorkNumber=${this.queryWorkNumber}&queryContactInfo=${this.queryContactInfo}&pageNum=${this.pageNum}&pageSize=${this.pageSize}`)

      const {
        data, msg, status, count
      } = res.data
      if (status === 200) {
        this.tableData = data
        this.total = count
      } else {
        this.$message.warning(msg)
      }
      this.loading = false
    },
    // 加载部门列表
    async getDeptTreeList() {
      const res = await this.$http.get('admin/dept/treeList')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.deptTreeList = data
      }
    },
    // 打开新建账号对话框
    handleAddAccount() {
      this.userForm = {}
      this.dialog = true
    },
    // 新建账号
    async doCommitAccount() {
      this.loading = true
      const res = await this.$http.post('admin/add/account', this.userForm)
      const { msg, status } = res.data

      if (status === 200) {
        this.getList()
      } else {
        this.$message.warning(msg)
      }
      this.loading = false
      this.$refs.addAccountDrawer.closeDrawer()
    },
    // 修改用户状态
    async changeUserStatus(user) {
      this.loading = true
      const res = await this.$http.put(`admin/${user.id}/status/${user.userStatus}`)
      const { msg, status } = res.data
      if (status === 200) {
        if (user.userStatus) {
          this.$message.success(user.userName + '用户已启用！')
        } else {
          this.$message.warning(user.userName + '用户已禁用！')
        }
      } else {
        user.userStatus = false
        this.$message.error(msg)
      }
      this.loading = false
    },
    doExportData() {

    },
    cancelForm() {
      this.loading = false
      this.dialog = false
      clearTimeout(this.timer)
    },
    cancelResetForm() {
      this.loading = false
      this.resetDialog = false
      clearTimeout(this.timer)
    },
    handleSizeChange(val) {
      this.pageSize = val
      this.pageNum = 1
      this.getList()

      console.log(`每页 ${val} 条`)
    },
    handleCurrentChange(val) {
      console.log(`当前页: ${val}`)
      this.pageNum = val
      this.getList()
    },
    handleSelectionChange(val) {
      this.multipleSelection = val
    },
    // 打开重置密码对话框
    handleResetPwd(row) {
      console.log(row)
      this.passwordForm = JSON.parse(JSON.stringify(row))
      this.resetDialog = true
    },
    // 重置密码
    async doResetPwd() {
      this.loading = true
      const res = await this.$http.post('admin/update/resetPwd', this.passwordForm)
      const { data, msg, status } = res.data

      if (status === 200) {
        this.$message.success(data)
        this.getList()
      }
      if (status === 500) {
        this.$message.warning(msg)
      }
      this.loading = false
      this.$refs.resetDrawer.closeDrawer()
    }
  }
}
</script>

<style scoped>
  .self-box{

    display: flex;
    flex-direction: column;
    flex: 1;
    background: white;
    position: relative;
    box-sizing: border-box;
    padding: 20px;
  }
  .self-container{
    padding: 10px 10px 10px 0;
    display: flex;
    min-height: calc(100vh - 50px);
    box-sizing: border-box;
  }
</style>
