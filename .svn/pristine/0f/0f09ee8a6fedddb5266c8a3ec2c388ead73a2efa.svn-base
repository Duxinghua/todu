<template>
  <div class="self-container">
    <div class="self-box">
      <el-row :gutter="20" class="grid-content">
        <el-col :span="5" style="height: 100%;padding: 20px 10px;border-right: 1px solid aliceblue;;">

          <div class="header-title">
            <!--          <img class="header-img" src="../../assets/logo.png" alt="无法显示图片">-->
            <div style="display: flex;justify-content: center">
              <div style="padding-right: 5px;"><el-icon class="el-icon-s-grid self-font-color" /></div>
              <div
                style="font-size: 14px"
              >武汉企秀网络科技有限公司</div>
            </div>

            <el-tree
              style="margin-top: 20px"
              :data="deptTreeList"
              :props="defaultProps"
              :expand-on-click-node="false"
              node-key="id"
              default-expand-all
              @node-click="handleNodeClick"
            >
              <span slot-scope="{ node }" class="custom-tree-node">
                <span>
                  <i class="el-icon-folder-opened" />{{ node.label }}
                </span>
              </span>
            </el-tree>
          </div>

        </el-col>
        <el-col :span="19" style="height: 100%;padding: 20px 10px">
          <div style="display: flex;flex-direction: column;height: 100%">
            <el-row>
              <el-col>
                <div class="header-title">
                  <span style="font-size: 24px;margin-left: 30px;margin-top: 20px;">企业员工</span>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="14">
                <div style="margin-top: 10px;margin-left: 30px">
                  <el-button style="cursor:pointer;" size="mini" type="info" effect="dark" @click="doExportData()">导出
                  </el-button>
                  <el-button style="cursor:pointer;" size="mini" type="info" effect="dark" @click="handleBacthDel()">删除
                  </el-button>
                  <el-button style="cursor:pointer;" size="mini" type="primary" @click="handleAddDept()">新增部门</el-button>
                </div>
              </el-col>
              <el-col :span="10">
                <el-button style="float:right;" type="primary" size="mini" icon="el-icon-plus" @click="handleAdd()">添加成员</el-button>
              </el-col>
            </el-row>
            <!-- 数据表格 -->
            <div style="flex: 1;display: flex">
              <el-table
                v-loading="loading"
                class="userTable"
                :data="tableData"
                height="auto"
                :fit="true"
                :header-cell-style="{background:'#eef1f6',color:'#606266'}"
                @selection-change="handleSelectionChange"
              >
                <el-table-column
                  type="selection"
                  width="55"
                />
                <el-table-column
                  prop="workNumber"
                  label="工号"
                  align="center"
                />
                <el-table-column
                  prop="userName"
                  label="姓名"
                  align="center"
                />
                <el-table-column
                  prop="userSex"
                  label="性别"
                  align="center"
                />
                <el-table-column
                  prop="deptName"
                  label="所属部门"
                  align="center"
                />
                <el-table-column
                  prop="userPosition"
                  label="岗位"
                  align="center"
                />
                <el-table-column
                  prop="userMajor"
                  label="专业"
                  align="center"
                />
                <el-table-column
                  prop="contactInfo"
                  label="手机号码"
                  align="center"
                />
                <el-table-column
                  prop="roleName"
                  label="系统角色"
                  align="center"
                />
                <el-table-column label="操作" width="120" fixed="right" align="center">
                  <template slot-scope="scope">
                    <div style="font-size: 18px;color:dodgerblue;">
                      <i style="cursor:pointer;" class="el-icon-edit-outline" @click="handleEdit(scope.row)" />
                      <i style="cursor:pointer;" class="el-icon-view" @click="handleView(scope.row)" />
                      <i style="cursor:pointer;" class="el-icon-delete" @click="handleDelete(scope.row)" />
                    </div>
                  </template>
                </el-table-column>
              </el-table>
            </div>
            <!-- 表格分页组件 -->
            <el-pagination
              style="margin:20px 0 20px 10px"
              :current-page="pageNum"
              :page-sizes="[20, 50, 80, 200]"
              :page-size="pageSize"
              layout="total, sizes, prev, pager, next, jumper"
              :total="total"
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
            />
          </div>
        </el-col>
      </el-row>

      <!-- 添加用户对话框 -->
      <el-drawer
        ref="addUserDrawer"
        :visible.sync="dialogFormVisibleAdd"
        direction="rtl"
        :show-close="false"
        size="30%"
      >
        <span style="margin-left: 50px">添加成员</span>
        <el-button style="float:right;margin-right: 20px;" type="primary" size="mini" @click="batchEditPage">批量添加</el-button>
        <el-form ref="addForm" :model="userForm" :rules="rules" style="margin: 50px 0 0 50px">
          <el-form-item prop="workNumber" style="width: 300px">
            <el-input v-model="userForm.workNumber" placeholder="请输入工号" autocomplete="off" />
          </el-form-item>
          <el-form-item prop="userName" style="width: 300px">
            <el-input v-model="userForm.userName" placeholder="请输入姓名" autocomplete="off" />
          </el-form-item>
          <el-form-item prop="contactInfo" style="width: 300px">
            <el-input v-model="userForm.contactInfo" placeholder="请输入手机号" autocomplete="off" />
          </el-form-item>
          <el-form-item>
            <el-select ref="deptSelect" v-model="userForm.userSex" placeholder="请选择性别" style="width: 300px" value="男">
              <el-option label="男" value="男" />
              <el-option label="女" value="女" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-cascader
              v-model="userForm.deptId"
              style="width: 300px"
              placeholder="请选择所属部门"
              :options="deptTreeList"
              :show-all-levels="showAllLevels"
              :disabled="cascaderDisabled"
              :props="{ checkStrictly: true,emitPath:false,expandTrigger:'hover',value:'id',label:'label'}"
              clearable
            />
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.userPositionId"
              placeholder="请选择岗位"
              style="width: 300px"
              value="-1"
            >
              <el-option label="请选择" :value="-1" disabled />
              <el-option v-for="(item,key) in posList" :key="key" :label="item.posName" :value="item.id" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.userMajorId"
              placeholder="请选择专业"
              style="width: 300px"
              value="-1"
            >
              <el-option label="请选择" :value="-1" disabled />
              <el-option v-for="(item,key) in majorList" :key="key" :label="item.majorName" :value="item.id" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.roleId"
              placeholder="请选择用户权限"
              style="width: 300px"
              value="-1"
            >
              <el-option label="请选择" value="-1" disabled />
              <el-option
                v-for="(item,key) in roleList"
                :key="key"
                :label="item.roleName"
                :value="item.id"
              />
            </el-select>
          </el-form-item>
        </el-form>

        <div style="margin: 100px 0 0 50px;">
          <el-button @click="cancelForm">取 消</el-button>
          <el-button type="primary" :loading="loading" @click="commitUser()">{{ loading ? '提交中 ...' : '确 定' }}</el-button>
        </div>
      </el-drawer>
      <!-- 编辑用户对话框 -->
      <el-drawer
        ref="editUserDrawer"
        :visible.sync="dialogFormVisibleEdit"
        direction="rtl"
        :show-close="false"
        size="30%"
      >
        <span style="margin-left: 50px;">编辑资料</span>
        <el-form
          ref="editForm"
          :model="userForm"
          :rules="rules"
          :disabled="editFormDisabled"
          style="margin: 50px 0 0 50px"
        >
          <el-form-item prop="workNumber" style="width: 300px">
            <el-input v-model="userForm.workNumber" placeholder="请输入工号" autocomplete="off" />
          </el-form-item>
          <el-form-item prop="userName" style="width: 300px">
            <el-input v-model="userForm.userName" placeholder="请输入姓名" autocomplete="off" />
          </el-form-item>
          <el-form-item prop="contactInfo" style="width: 300px">
            <el-input v-model="userForm.contactInfo" placeholder="请输入手机号" autocomplete="off" />
          </el-form-item>
          <el-form-item>
            <el-select ref="deptSelect" v-model="userForm.userSex" placeholder="请选择性别" style="width: 300px" value="男">
              <el-option label="男" value="男" />
              <el-option label="女" value="女" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-cascader
              v-model="userForm.deptId"
              style="width: 300px"
              placeholder="请选择所属部门"
              :options="deptTreeList"
              :show-all-levels="showAllLevels"
              :disabled="cascaderDisabled"
              :props="{ checkStrictly: true,emitPath:false,expandTrigger:'hover',value:'id',label:'label'}"
              clearable
            />
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.userPositionId"
              placeholder="请选择岗位"
              style="width: 300px"
              value="0"
            >
              <el-option label="请选择岗位" :value="0" disabled />
              <el-option v-for="(item,key) in posList" :key="key" :label="item.posName" :value="item.id" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.userMajorId"
              placeholder="请选择专业"
              style="width: 300px"
              value="0"
            >
              <el-option label="请选择专业" :value="0" disabled />
              <el-option v-for="(item,key) in majorList" :key="key" :label="item.majorName" :value="item.id" />
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-select
              ref="positionSelect"
              v-model="userForm.roleId"
              placeholder="请选择用户权限"
              style="width: 300px"
              value="0"
            >
              <el-option label="请选择用户权限" :value="0" disabled />
              <el-option
                v-for="(item,key) in roleList"
                :key="key"
                :label="item.roleName"
                :value="item.id"
              />
            </el-select>
          </el-form-item>
        </el-form>
        <div style="margin: 100px 0 0 50px;">
          <el-button @click="cancelEditForm">取 消</el-button>
          <el-button type="primary" :loading="loading" :disabled="editBtnDisabled" @click="updateUser()">{{ loading ? '提交中...' : '确 定' }}
          </el-button>
        </div>
      </el-drawer>

      <!-- 新增部门对话框 -->
      <el-drawer
        ref="addDeptDrawer"
        :visible.sync="addDeptVisible"
        direction="rtl"
        :show-close="false"
        size="30%"
      >
        <span style="margin-left: 50px">新增部门</span>
        <el-form ref="addForm" :model="deptForm" :rules="rules" style="margin: 50px 0 0 50px">
          <el-form-item prop="deptName" style="width: 300px">
            <el-input v-model="deptForm.deptName" placeholder="部门名称" autocomplete="off" />
          </el-form-item>
          <el-form-item>
            <el-cascader
              v-model="deptForm.pid"
              style="width: 300px"
              placeholder="请选择上级部门"
              :options="deptTreeList"
              :show-all-levels="showAllLevels"
              :disabled="cascaderDisabled"
              :props="{ checkStrictly: true,emitPath:false,expandTrigger:'hover',value:'id',label:'label'}"
              clearable
            />
          </el-form-item>
        </el-form>

        <div style="margin: 100px 0 0 50px;">
          <el-button @click="cancelDeptForm">取 消</el-button>
          <el-button type="primary" :loading="loading" @click="commitDept()">{{ loading ? '提交中 ...' : '确 定' }}</el-button>
        </div>
      </el-drawer>
    </div>
  </div>

</template>

<script>
export default {
  name: 'Users',
  data() {
    return {
      currentDeptId: -1,
      pageNum: 1,
      pageSize: 20,
      total: 0,
      tableHeight: 500 /* window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight - 500*/,
      tableData: [],
      majorList: [],
      posList: [],
      deptList: [],
      roleList: [],
      deptTreeList: [],
      multipleSelection: [],
      addDeptVisible: false,
      dialogFormVisibleAdd: false,
      dialogFormVisibleEdit: false,
      dialogRoleVisible: false,
      editFormDisabled: false,
      editBtnDisabled: false,
      cascaderDisabled: false,
      showAllLevels: false,
      currentRoleId: -1,
      currentUserId: -1,
      currentUserName: '',
      labelwidth: '80px',
      userForm: {
        workNumber: '',
        userName: '',
        loginName: '',
        userSex: '男',
        userPositionId: 1,
        userMajorId: 1,
        contactInfo: '',
        deptId: '-1',
        deptName: '',
        roleId: '-1'
      },
      deptForm: {
        deptName: '',
        pid: 0
      },
      deptTreeData: [{
        id: 1,
        icon: 'el-icon-folder-opened',
        label: '技术部门(20)',
        children: [{
          id: 2,
          icon: 'el-icon-folder-opened',
          label: '项目一组(2)'
        },
        {
          id: 3,
          icon: 'el-icon-folder-opened',
          label: '项目二组(3)'
        },
        {
          id: 4,
          icon: 'el-icon-folder-opened',
          label: '项目三组(5)'
        }]
      }, {
        id: 5,
        icon: 'el-icon-folder-opened',
        label: '业务部门(2)',
        children: [{
          id: 6,
          icon: 'el-icon-folder-opened',
          label: '业务一组(1)'
        }]
      }],
      defaultProps: {
        children: 'children',
        label: 'label'
      },
      rules: {
        deptName: [
          { required: true, message: '请输入部门名称', trigger: 'blur' }
        ],
        workNumber: [
          { required: true, message: '请输入用户工号', trigger: 'blur' },
          { min: 3, max: 10, message: '长度在 3 到 10 个字符', trigger: 'change' }
        ],
        userName: [
          { required: true, message: '请输入用户姓名', trigger: 'blur' }
        ],
        userPositionId: [
          { required: true, message: '请选择用户岗位', trigger: 'blur' }
        ],
        userMajorId: [
          { required: true, message: '请选择用户专业', trigger: 'blur' }
        ],
        contactInfo: [
          { required: true, message: '请输入手机号码', trigger: 'blur' },
          { min: 11, max: 11, message: '长度为11位数字', trigger: 'change' }
        ],
        deptId: [
          { required: true, message: '请选择用户所属部门', trigger: 'blur' }
        ]
      },
      timer: null,
      loading: false
    }
  },
  watch: {
    // 这里的定时器是为了优化，如果频繁调用window.onresize方法会造成页面卡顿，增加定时器会避免频繁调用window.onresize方法
    // timer默认值设置为false，这里相当于一个按钮，防止频繁改变时引起卡顿
    tableHeight(val) {
      if (!this.timer) {
        this.tableHeight = val
        this.timer = true
        const that = this
        setTimeout(function() {
          that.timer = false
        }, 400)
      }
    }
  },
  created() {
    const breadData = {
      level1: '通讯录'
    }

    this.$emit('setBread', breadData)
    this.getList()
    this.getMajorList()
    this.getPosList()
    this.getDeptTreeList()
    this.getDeptList()
    this.getRoleList()
  },
  mounted() {
    const that = this
    window.onresize = () => {
      return (() => {
        window.tableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
        that.tableHeight = window.tableHeight - that.$refs.queryHeight.offsetHeight - 150
      })()
    }
  },

  methods: {

    // 修改用户状态
    async changeUserStatus(user) {
      this.loading = true
      const res = await this.$http.put(`admin/${user.id}/status/${user.userStatus}`)
      const { msg, status } = res.data
      if (status === 200) {
        if (user.userStatus) {
          this.$message.success(user.userName + '用户已启用！')
        } else {
          this.$message.warning(user.userName + '用户已禁用！')
        }
      } else {
        this.$message.error(msg)
      }
      this.loading = false
    },

    // 加载专业列表
    async getMajorList() {
      const res = await this.$http.get('admin/major/list')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.majorList = data
      }
    },
    async getRoleList() {
      const res = await this.$http.get('admin/role/list/1')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.roleList = data
      }
    },
    // 加载岗位列表
    async getPosList() {
      const res = await this.$http.get('admin/pos/list')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.posList = data
      }
    },
    async getDeptList() {
      const res = await this.$http.get('admin/dept/list')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.deptList = data
      }
    },
    async getDeptTreeList() {
      const res = await this.$http.get('admin/dept/treeList')
      const {
        data, status
      } = res.data
      if (status === 200) {
        this.deptTreeList = data
      }
    },
    // 加载用户列表
    async getList() {
      const res = await this.$http.get(`admin/list/dept?deptId=${this.currentDeptId}&pageNum=${this.pageNum}&pageSize=${this.pageSize}`)

      const {
        data, msg, status, count
      } = res.data

      if (status === 200) {
        this.tableData = data
        this.total = count
      } else {
        this.$message.warning(msg)
      }
      this.loading = false
    },
    // 提交添加用户信息
    async commitUser() {
      this.loading = true
      if (this.userForm.roleId === 0) {
        this.$message.warning('未设置用户的角色，用户无法启用！')
      }

      const deptId = this.userForm.deptId
      const majorId = this.userForm.userMajorId
      const posId = this.userForm.userPositionId
      if (deptId) {
        const deptObj = this.deptList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === deptId// 筛选出匹配数据
        })
        this.userForm.deptName = deptObj.deptName
      }
      if (majorId) {
        const majorObj = this.majorList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === majorId// 筛选出匹配数据
        })
        this.userForm.userMajor = majorObj.majorName
      }
      if (posId) {
        const posObj = this.posList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === posId// 筛选出匹配数据
        })
        this.userForm.userPosition = posObj.posName
      }

      const res = await this.$http.post('admin/add', this.userForm)
      const {
        msg, status
      } = res.data
      if (status === 200) {
        this.getList()
        this.loading = false
        this.$refs.addUserDrawer.closeDrawer()
      } else {
        this.$message.warning(msg)
        this.loading = false
      }
    },
    // 编辑用户
    async updateUser() {
      this.dialogFormVisibleEdit = false
      this.loading = true

      const deptId = this.userForm.deptId
      const majorId = this.userForm.userMajorId
      const posId = this.userForm.userPositionId
      if (deptId) {
        const deptObj = this.deptList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === deptId// 筛选出匹配数据
        })
        this.userForm.deptName = deptObj.deptName
      }
      if (majorId) {
        const majorObj = this.majorList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === majorId// 筛选出匹配数据
        })
        this.userForm.userMajor = majorObj.majorName
      }
      if (posId) {
        const posObj = this.posList.find((item) => { // 这里的userList就是上面遍历的数据源
          return item.id === posId// 筛选出匹配数据
        })
        this.userForm.userPosition = posObj.posName
      }

      const res = await this.$http.post('admin/update', this.userForm)
      const {
        msg, status
      } = res.data
      if (status === 200) {
        this.getList()
      } else {
        this.$message.warning(msg)
        this.loading = false
      }
    },
    // 打开添加用户对话框
    handleAdd() {
      console.log('打开添加用户对话框')
      this.dialogFormVisibleAdd = true
      // this.$refs获取组件需要等组件渲染完成后才能调用重置表单数据方法
      this.userForm = {}
    },
    handleEdit(row) {
      this.userForm = row
      this.editFormDisabled = false
      this.editBtnDisabled = false
      this.dialogFormVisibleEdit = true
    },
    // 查看
    handleView(row) {
      this.userForm = row
      this.editFormDisabled = true
      this.editBtnDisabled = true
      this.dialogFormVisibleEdit = true
    },
    // 删除
    handleDelete(row) {
      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(async() => {
        const res = await this.$http.delete(`admin/delete/${row.id}`)
        const { msg, status } = res.data
        if (status === 200) {
          this.getList()
          this.$message({
            type: 'success',
            message: '删除成功!'
          })
        } else {
          this.$message.warning(msg)
        }
      }).catch(() => {
        this.$message({
          type: 'info',
          message: '已取消删除'
        })
      })
    },
    handleSizeChange(val) {
      this.pageSize = val
      this.pageNum = 1
      this.getList()

      console.log(`每页 ${val} 条`)
    },
    handleCurrentChange(val) {
      console.log(`当前页: ${val}`)
      this.pageNum = val
      this.getList()
    },
    handleNodeClick(data) {
      this.currentDeptId = data.id
      this.getList()
    },
    handleAddDept() {
      this.deptForm = {
        pid: 0
      }
      this.addDeptVisible = true
    },
    async commitDept() {
      this.loading = true
      console.log(this.deptForm)
      const res = await this.$http.post('admin/dept/add', this.deptForm)
      const { msg, status } = res.data
      if (status === 200) {
        this.loading = false
        this.$refs.addDeptDrawer.closeDrawer()
        this.getDeptTreeList()
      }
      if (status === 500) {
        this.$message.warning(msg)
        this.loading = false
      }
    },
    doExportData() {
    },
    handleBacthDel() {
      if (this.multipleSelection.length === 0) {
        this.$message.warning('请至少选择一个员工！')
        return
      }

      this.$confirm('此操作将永久已勾选的用户, 是否继续?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(async() => {
        const userIds = []
        this.multipleSelection.forEach((item) => {
          userIds.push(item.id)
        })
        const uids = userIds.join(',')
        console.log('uids', uids)

        const res = await this.$http.delete(`admin/batchDelete/${uids}`)
        const { msg, status } = res.data
        if (status === 200) {
          this.getList()
          this.$message({
            type: 'success',
            message: '删除成功!'
          })
        } else {
          this.$message.warning(msg)
        }
      }).catch(() => {
        this.$message({
          type: 'info',
          message: '已取消删除'
        })
      })
    },
    handleSelectionChange(val) {
      this.multipleSelection = val
    },
    cancelForm() {
      this.loading = false
      this.dialogFormVisibleAdd = false
      clearTimeout(this.timer)
    },
    cancelEditForm() {
      this.loading = false
      this.dialogFormVisibleEdit = false
      clearTimeout(this.timer)
    },
    cancelDeptForm() {
      this.loading = false
      this.addDeptVisible = false
      clearTimeout(this.timer)
    },
    batchEditPage(){
      this.$router.push('/mailList/batchEdit')
    }
  }
}
</script>

<style scoped>
  .bg-purple {
    background: #d3dce6;
    height: 100%;
  }

  .grid-content {
    background: #ffffff;
    border-radius: 4px;
    height: 100%;
  }

  .userTable {
    width: 98%;
    margin: 20px 0 0 20px;
  }

  .header-img {
    width: 20px;
    height: 20px;
  }

  .header-title {
    padding: 20px 10px;
  }

  .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
  }
  .self-box{

    display: flex;
    flex-direction: column;
    flex: 1;
    background: white;
    position: relative;
    box-sizing: border-box;
  }
  .self-container{
    padding: 10px 10px 10px 0;
    display: flex;
    min-height: calc(100vh - 50px);
    box-sizing: border-box;
  }
</style>
