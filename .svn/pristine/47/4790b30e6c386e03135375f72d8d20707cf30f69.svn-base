<template>

  <div class="self-container">
    <div class="self-box">

      <div slot="header">
        <span>批量添加(<span style="font-size: 14px;">工号，姓名，手机号为必填项</span><span style="color: red;">*</span>)</span>
      </div>
      <div style="flex: 1">
        <!-- 数据表格 -->
        <el-table
          :data="userForms"
          style="width: 100%; margin-top:20px;"
          size="mini"
          tooltip-effect="dark"
          :header-cell-style="{background:'#eef1f6',color:'#606266'}"
        >
          <el-table-column
            label="工号"
            width="150"
            align="center"
          >
            <template slot-scope="scope">
              <el-input v-model="scope.row.workNumber" placeholder="请输入工号" autocomplete="off" size="mini" />
            </template>
          </el-table-column>
          <el-table-column label="姓名" width="150" align="center">
            <template slot-scope="scope">
              <el-input v-model="scope.row.userName" placeholder="请输入姓名" autocomplete="off" size="mini" />
            </template>
          </el-table-column>
          <el-table-column label="手机号" width="150" align="center">
            <template slot-scope="scope">
              <el-input v-model="scope.row.contactInfo" placeholder="请输入手机号" autocomplete="off" size="mini" />
            </template>
          </el-table-column>
          <el-table-column label="项目类别" width="100" align="center">
            <template slot-scope="scope">
              <el-select v-model="scope.row.userSex" placeholder="请选择性别" value="男" size="mini">
                <el-option label="男" value="男" />
                <el-option label="女" value="女" />
              </el-select>
            </template>
          </el-table-column>
          <el-table-column label="所属部门" align="center">
            <template slot-scope="scope">
              <el-cascader
                v-model="scope.row.deptId"
                size="mini"
                placeholder="请选择所属部门"
                :options="deptTreeList"
                :show-all-levels="showAllLevels"
                :disabled="cascaderDisabled"
                :props="{ checkStrictly: true,emitPath:false,expandTrigger:'hover',value:'id',label:'label'}"
                clearable
              />
            </template>
          </el-table-column>
          <el-table-column label="岗位" width="150" align="center">
            <template slot-scope="scope">
              <el-select
                ref="positionSelect"
                v-model="scope.row.userPositionId"
                placeholder="请选择岗位"
                size="mini"
                value="-1"
              >
                <el-option label="请选择" :value="0" disabled />
                <el-option v-for="(item,key) in posList" :key="key" :label="item.posName" :value="item.id" />
              </el-select>
            </template>
          </el-table-column>
          <el-table-column label="专业" width="150" align="center">
            <template slot-scope="scope">
              <el-select
                ref="positionSelect"
                v-model="scope.row.userMajorId"
                placeholder="请选择专业"
                size="mini"
                value="-1"
              >
                <el-option label="请选择" :value="0" disabled />
                <el-option v-for="(item,key) in majorList" :key="key" :label="item.majorName" :value="item.id" />
              </el-select>
            </template>
          </el-table-column>
          <el-table-column label="用户权限" width="150" align="center">
            <template slot-scope="scope">
              <el-select
                ref="positionSelect"
                v-model="scope.row.roleId"
                placeholder="请选择用户权限"
                size="mini"
                value="-1"
              >
                <el-option label="请选择" :value="0" disabled />
                <el-option
                  v-for="(item,key) in roleList"
                  :key="key"
                  :label="item.roleName"
                  :value="item.id"
                />
              </el-select>
            </template>
          </el-table-column>
          <el-table-column label="操作" width="100" align="center">
            <template slot-scope="scope">
              <el-button size="mini" type="primary" plain @click="handleDelete(scope.$index)">删除</el-button>
            </template>
          </el-table-column>
        </el-table>
        <div style="text-align: center;margin-top: 20px;">
          <el-button style="float: left;" type="primary" plain size="mini" @click="handleAddRow()">添加</el-button>
        </div>
      </div>

      <div style="text-align: center;">
        <el-button @click="goBack()">返回</el-button>
        <el-button type="primary" :loading="loading" @click="doBatchAdd()">{{ loading ? '提交中 ...' : '确 定' }}</el-button>
      </div></div></div>
</template>

<script>
import { batchSavePerson, deptTreeList, deptList } from '@/api/dept'
import { posList, majorList, roleList } from '@/api/dict'
export default {
  name: 'BatchAddUser',
  data() {
    return {
      userForms: [],
      deptTreeList: [],
      deptList: [],
      majorList: [],
      posList: [],
      roleList: [],
      loading: false,
      cascaderDisabled: false,
      showAllLevels: false
    }
  },
  created() {
    // 加载部门树
    this.getDeptTreeList()
    this.getMajorList()
    this.getPosList()
    this.getDeptList()
    this.getRoleList()
  },
  // 加载专业列表

  mounted() {

  },
  methods: {
    async getDeptTreeList() {
      await deptTreeList().then(res => {
        this.deptTreeList = res.data
      })
    },
    async getMajorList() {
      majorList().then(res => {
        const {
          data, status
        } = res
        if (status === 200) {
          this.majorList = data
        }
      })
    },
    // 加载岗位列表
    async getPosList() {
      posList().then(res => {
        const {
          data, status
        } = res
        if (status === 200) {
          this.posList = data
        }
      })
    },
    async getDeptList() {
      deptList().then(res => {
        const {
          data, status
        } = res
        if (status === 200) {
          this.deptList = data
        }
      })
    },
    async getRoleList() {
      roleList().then(res => {
        const {
          data, status
        } = res
        if (status === 200) {
          this.roleList = data
        }
      })
    },
    goBack() {
      this.$router.push('/mailList/index')
    },
    handleAddRow() {
      // 判断上一条是否填写完整

      const userForm = {
        workNumber: '',
        userName: '',
        contactInfo: '',
        userSex: '男',
        deptId: 0,
        userPositionId: 0,
        userMajorId: 0,
        roleId: 0
      }
      this.userForms.unshift(userForm)
    },
    handleDelete(index) {
      this.userForms.splice(index, 1)
    },
    doBatchAdd() {
      console.log(this.userForms)
    }
  }
}
</script>

<style scoped>

</style>

<style scoped>
  .self-box{
    padding: 20px;
    display: flex;
    flex-direction: column;
    flex: 1;
    background: white;
    position: relative;
    box-sizing: border-box;
  }
  .self-container{
    padding: 10px 10px 10px 0;
    display: flex;
    min-height: calc(100vh - 50px);
    box-sizing: border-box;
  }
</style>
